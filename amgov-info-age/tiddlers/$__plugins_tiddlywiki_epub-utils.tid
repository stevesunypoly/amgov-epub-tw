author: Jeremy Ruston
core-version: >=5.0.0
created: 20170728020418222
dependents: 
description: EPUB utilities
list: readme controls license
modified: 20170728020418222
plugin-type: plugin
title: $:/plugins/tiddlywiki/epub-utils
type: application/json
version: 5.1.15-prerelease

{
    "tiddlers": {
        "$:/plugins/tiddlywiki/epub-utils/controls": {
            "title": "$:/plugins/tiddlywiki/epub-utils/controls",
            "caption": "EPUB Utilities",
            "tags": "$:/tags/ControlPanel",
            "text": ""
        },
        "$:/language/Help/epub-import": {
            "title": "$:/language/Help/epub-import",
            "description": "Import tiddlers from an EPUB file",
            "text": "Imports tiddlers from an EPUB file\n\n```\n--epub-import <filename> <importSpec>\n```\n\n* ''filename'': filename of the `.epub` file\n* ''title'': title of the import specification tiddler to be used for the import\n"
        },
        "$:/plugins/tiddlywiki/epub-utils/icon": {
            "title": "$:/plugins/tiddlywiki/epub-utils/icon",
            "tags": "$:/tags/Image",
            "type": "image/svg+xml",
            "text": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"128px\" height=\"128px\" viewBox=\"0 0 281 281\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <!-- Generator: Sketch 41 (35326) - http://www.bohemiancoding.com/sketch -->\n    <title>square-logo</title>\n    <desc>Created with Sketch.</desc>\n    <defs>\n        <path d=\"M-1.13686838e-13,0.584634156 L-1.13686838e-13,137.584634 C3.51734923,139.137597 7.40796212,140 11.5,140 C15.2080115,140 18.7506304,139.29187 22,138.003466 L22,1.00346617 C18.7506304,2.29186988 15.2080115,3 11.5,3 C7.40796212,3 3.51734923,2.13759708 -8.76484592e-07,0.584629044 L-1.13686838e-13,0.584634156 Z\" id=\"path-1\"></path>\n        <mask id=\"mask-2\" maskContentUnits=\"userSpaceOnUse\" maskUnits=\"objectBoundingBox\" x=\"0\" y=\"0\" width=\"22.0000009\" height=\"139.415371\" fill=\"white\">\n            <use xlink:href=\"#path-1\"></use>\n        </mask>\n        <path d=\"M-7.09605699e-14,0.640689576 L-7.09605699e-14,150.776413 C3.85459686,152.478276 8.11824635,153.423367 12.6026337,153.423367 C16.6661738,153.423367 20.5484631,152.64734 24.1093862,151.235403 L24.1093862,1.0996797 C20.5484631,2.51161709 16.6661738,3.28764358 12.6026337,3.28764358 C8.11824635,3.28764358 3.85459686,2.34255244 -9.60522925e-07,0.640683973 L-7.09605699e-14,0.640689576 Z\" id=\"path-3\"></path>\n        <mask id=\"mask-4\" maskContentUnits=\"userSpaceOnUse\" maskUnits=\"objectBoundingBox\" x=\"0\" y=\"0\" width=\"24.1093872\" height=\"152.782683\" fill=\"white\">\n            <use xlink:href=\"#path-3\"></use>\n        </mask>\n        <path d=\"M-1.44175581e-12,0.514088569 L-1.44175581e-12,120.982818 C2.71795167,122.348391 5.72433436,123.106731 8.88636364,123.106731 C11.7516453,123.106731 14.4891235,122.484048 17,121.351111 L17,0.882381713 C14.4891235,2.01531863 11.7516453,2.63800137 8.88636364,2.63800137 C5.72433436,2.63800137 2.71795167,1.87966135 -6.77284902e-07,0.514084073 L-1.44175581e-12,0.514088569 Z\" id=\"path-5\"></path>\n        <mask id=\"mask-6\" maskContentUnits=\"userSpaceOnUse\" maskUnits=\"objectBoundingBox\" x=\"0\" y=\"0\" width=\"17.0000007\" height=\"122.592647\" fill=\"white\">\n            <use xlink:href=\"#path-5\"></use>\n        </mask>\n    </defs>\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path d=\"M120.519336,268 C115.343314,267.85363 113.066662,267.866218 110.430609,263.529801 L108.376111,263.588683 C105.984739,263.482447 106.981339,263.530601 105.385946,263.451141 C102.718513,263.347306 103.145815,260.811849 102.676546,259.47226 C101.925874,254.924985 103.669912,250.35421 103.614894,245.806039 C103.595415,244.191546 101.311677,238.476825 100.495796,236.433691 C97.9381105,236.915428 95.3665504,237.007275 92.7717718,237.13662 C86.7907932,237.121964 80.8503776,236.389275 74.952911,235.458838 C73.803643,240.208145 70.3875719,246.855584 73.2112246,251.682341 C76.6386134,256.675059 79.0437889,258.058266 82.7718688,258.359303 C86.4999085,258.660097 87.3417258,262.870717 86.4397783,264.374605 C85.6414477,265.413956 84.2383323,265.602617 83.0462143,265.85442 L80.6616573,265.966537 C78.7852096,265.903387 77.1080108,265.396563 75.4360042,264.614909 C72.6437635,263.055637 69.759895,259.81398 67.6172363,257.486691 C68.1160636,258.41605 68.4136009,260.230336 67.9611573,261.074625 C66.6943279,262.869917 61.2152769,262.858948 58.7060672,261.74334 C55.8556463,260.476267 48.9679214,251.579512 47.903016,244.91624 C50.736055,239.556631 54.8632347,234.888088 56.9513003,229.052276 C52.3998736,226.147001 49.9621921,221.417456 50.2786413,216.060077 L50.3928617,215.439923 C45.9144638,216.278618 48.2368577,215.966576 43.4192746,216.331149 C28.0768329,216.284189 14.5843871,205.877549 22.1817809,189.703786 C22.6758401,188.746048 23.1458298,187.8753 23.9833597,188.291147 C24.6555705,188.624826 24.559011,189.96335 24.2208912,191.447706 C19.8781147,210.773172 41.103032,210.921086 54.150366,207.345009 C55.4453037,206.990016 58.0207451,204.599151 59.8048027,203.806556 C62.721006,202.511088 65.8862471,201.985484 69.0274965,201.606758 C76.8404009,200.71616 86.2305545,204.833534 91.0016667,204.967977 C95.7728351,205.102414 102.559998,203.825122 106.726358,204.094056 C109.749406,204.232424 112.717851,204.778296 115.634614,205.555885 C117.522599,196.353013 117.656076,189.570253 122.131799,188 C124.758602,188.41504 126.782723,191.996008 128.280975,193.909328 C131.338429,193.787829 134.242103,194.562263 137.129166,195.421771 C142.356028,194.679736 146.742137,191.743402 151.358025,189.459199 C146.680619,193.279131 146.046105,199.493789 146.580567,205.240743 C146.779327,208.222874 145.936975,211.460597 144.89563,214.513904 C142.946921,219.488489 139.183527,224.732057 134.815607,224.46312 C133.164366,224.41087 132.205121,223.475533 130.97786,222.476942 C130.739786,224.499602 129.804092,226.304425 128.902096,228.093281 C126.819118,232.059546 121.375863,233.807366 116.335713,238.042519 C111.295904,242.277736 117.948445,257.403477 119.56144,260.159444 C121.174172,262.915673 125.676369,263.923976 123.929368,266.411539 C123.394915,267.233069 122.577713,267.526895 121.704336,267.845597 L120.519336,268 Z M62.5139576,255.447905 L63.3132294,255.649143 C64.3175869,255.265632 66.3364778,255.858358 67.4074074,256.148148 C65.4353855,254.28239 62.4643897,251.54256 60.3238899,249.815294 C59.6213109,247.72417 59.9210901,245.619969 60.0722509,243.485243 L60.1025707,243.308642 C59.2588388,245.017544 58.188114,246.678703 57.6126243,248.4775 C56.9391734,250.904232 60.6057235,253.522551 62.027462,255.02315 L62.5139576,255.447905 Z\" id=\"Path-copy-5\" fill=\"#000000\"></path>\n        <rect id=\"Rectangle\" fill=\"#000000\" x=\"146\" y=\"141\" width=\"17\" height=\"138\" rx=\"8\"></rect>\n        <rect id=\"Rectangle-2\" fill=\"#000000\" x=\"30\" y=\"262\" width=\"133\" height=\"17\" rx=\"8\"></rect>\n        <g id=\"Group\" transform=\"translate(181.448862, 209.818793) rotate(-7.000000) translate(-181.448862, -209.818793) translate(170.448862, 139.818793)\">\n            <use id=\"Combined-Shape\" stroke=\"#474747\" mask=\"url(#mask-2)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" fill=\"#BAD23A\" xlink:href=\"#path-1\"></use>\n            <path d=\"M17.1065616,124.052984 C14.8104633,124.677655 12.4273203,124.997515 10.0003356,124.997515 C7.90593099,124.997515 5.84372745,124.759325 3.84109528,124.292167 C3.03432789,124.10397 2.22775038,124.605421 2.03955398,125.412189 C1.85135758,126.218956 2.35280845,127.025533 3.15957583,127.21373 C5.38523781,127.732915 7.67609565,127.997515 10.0003356,127.997515 C12.6939542,127.997515 15.3419084,127.642113 17.8941095,126.947767 C18.6934817,126.730292 19.1652024,125.905974 18.947727,125.106602 C18.7302517,124.30723 17.9059339,123.835509 17.1065616,124.052984 Z\" id=\"Combined-Shape\" fill=\"#474747\"></path>\n            <path d=\"M17.1065616,118.052984 C14.8104633,118.677655 12.4273203,118.997515 10.0003356,118.997515 C7.90593099,118.997515 5.84372745,118.759325 3.84109528,118.292167 C3.03432789,118.10397 2.22775038,118.605421 2.03955398,119.412189 C1.85135758,120.218956 2.35280845,121.025533 3.15957583,121.21373 C5.38523781,121.732915 7.67609565,121.997515 10.0003356,121.997515 C12.6939542,121.997515 15.3419084,121.642113 17.8941095,120.947767 C18.6934817,120.730292 19.1652024,119.905974 18.947727,119.106602 C18.7302517,118.30723 17.9059339,117.835509 17.1065616,118.052984 Z\" id=\"Combined-Shape-Copy-2\" fill=\"#474747\"></path>\n            <path d=\"M17.1065616,8.05298433 C14.8104633,8.67765543 12.4273203,8.99751524 10.0003356,8.99751524 C7.90593099,8.99751524 5.84372745,8.75932509 3.84109528,8.29216669 C3.03432789,8.10397029 2.22775038,8.60542115 2.03955398,9.41218854 C1.85135758,10.2189559 2.35280845,11.0255334 3.15957583,11.2137298 C5.38523781,11.7329149 7.67609565,11.9975152 10.0003356,11.9975152 C12.6939542,11.9975152 15.3419084,11.6421131 17.8941095,10.9477673 C18.6934817,10.730292 19.1652024,9.90597413 18.947727,9.10660189 C18.7302517,8.30722965 17.9059339,7.835509 17.1065616,8.05298433 Z\" id=\"Combined-Shape-Copy-3\" fill=\"#474747\"></path>\n            <path d=\"M17.1065616,130.052984 C14.8104633,130.677655 12.4273203,130.997515 10.0003356,130.997515 C7.90593099,130.997515 5.84372745,130.759325 3.84109528,130.292167 C3.03432789,130.10397 2.22775038,130.605421 2.03955398,131.412189 C1.85135758,132.218956 2.35280845,133.025533 3.15957583,133.21373 C5.38523781,133.732915 7.67609565,133.997515 10.0003356,133.997515 C12.6939542,133.997515 15.3419084,133.642113 17.8941095,132.947767 C18.6934817,132.730292 19.1652024,131.905974 18.947727,131.106602 C18.7302517,130.30723 17.9059339,129.835509 17.1065616,130.052984 Z\" id=\"Combined-Shape-Copy\" fill=\"#474747\"></path>\n        </g>\n        <g id=\"Group-Copy-2\" transform=\"translate(228.154869, 204.260501) rotate(-16.000000) translate(-228.154869, -204.260501) translate(215.654869, 127.260501)\">\n            <use id=\"Combined-Shape\" stroke=\"#474747\" mask=\"url(#mask-4)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" fill=\"#766BC4\" xlink:href=\"#path-3\"></use>\n            <path d=\"M18.7467592,135.947332 C16.2305082,136.631898 13.6188666,136.982426 10.9591796,136.982426 C8.66396108,136.982426 6.404031,136.721398 4.20938407,136.209448 C3.32526287,136.003207 2.44134974,136.552737 2.23510885,137.436859 C2.02886795,138.32098 2.57839852,139.204893 3.46251973,139.411134 C5.90158083,139.980099 8.41208885,140.27007 10.9591796,140.27007 C13.9110657,140.27007 16.8129089,139.880591 19.609818,139.119671 C20.485835,138.881343 21.0027848,137.977989 20.7644577,137.101972 C20.5261306,136.225955 19.6227762,135.709005 18.7467592,135.947332 Z\" id=\"Combined-Shape\" fill=\"#474747\"></path>\n            <path d=\"M18.7467592,129.372045 C16.2305082,130.05661 13.6188666,130.407139 10.9591796,130.407139 C8.66396108,130.407139 6.404031,130.146111 4.20938407,129.634161 C3.32526287,129.42792 2.44134974,129.97745 2.23510885,130.861571 C2.02886795,131.745693 2.57839852,132.629606 3.46251973,132.835847 C5.90158083,133.404812 8.41208885,133.694782 10.9591796,133.694782 C13.9110657,133.694782 16.8129089,133.305304 19.609818,132.544383 C20.485835,132.306056 21.0027848,131.402702 20.7644577,130.526685 C20.5261306,129.650668 19.6227762,129.133718 18.7467592,129.372045 Z\" id=\"Combined-Shape-Copy-2\" fill=\"#474747\"></path>\n            <path d=\"M18.7467592,8.82511406 C16.2305082,9.50967938 13.6188666,9.86020772 10.9591796,9.86020772 C8.66396108,9.86020772 6.404031,9.59917962 4.20938407,9.08722951 C3.32526287,8.88098862 2.44134974,9.43051919 2.23510885,10.3146404 C2.02886795,11.1987616 2.57839852,12.0826747 3.46251973,12.2889156 C5.90158083,12.8578808 8.41208885,13.1478513 10.9591796,13.1478513 C13.9110657,13.1478513 16.8129089,12.7583728 19.609818,11.9974523 C20.485835,11.7591251 21.0027848,10.8557707 20.7644577,9.97975373 C20.5261306,9.10373673 19.6227762,8.58678694 18.7467592,8.82511406 Z\" id=\"Combined-Shape-Copy-3\" fill=\"#474747\"></path>\n            <path d=\"M18.7467592,142.522619 C16.2305082,143.207185 13.6188666,143.557713 10.9591796,143.557713 C8.66396108,143.557713 6.404031,143.296685 4.20938407,142.784735 C3.32526287,142.578494 2.44134974,143.128025 2.23510885,144.012146 C2.02886795,144.896267 2.57839852,145.78018 3.46251973,145.986421 C5.90158083,146.555386 8.41208885,146.845357 10.9591796,146.845357 C13.9110657,146.845357 16.8129089,146.455878 19.609818,145.694958 C20.485835,145.456631 21.0027848,144.553276 20.7644577,143.677259 C20.5261306,142.801242 19.6227762,142.284292 18.7467592,142.522619 Z\" id=\"Combined-Shape-Copy\" fill=\"#474747\"></path>\n        </g>\n        <g id=\"Group-Copy\" transform=\"translate(205.051313, 218.950447) rotate(-10.000000) translate(-205.051313, -218.950447) translate(196.551313, 156.950447)\">\n            <use id=\"Combined-Shape\" stroke=\"#474747\" mask=\"url(#mask-6)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" fill=\"#6BC48B\" xlink:href=\"#path-5\"></use>\n            <path d=\"M13.2187067,109.083981 C11.4444489,109.633275 9.60292935,109.914539 7.72753202,109.914539 C6.10912849,109.914539 4.51560757,109.70509 2.96811908,109.294302 C2.34470792,109.128815 1.72144348,109.569757 1.57601899,110.279175 C1.4305945,110.988593 1.81807925,111.697844 2.44149042,111.863331 C4.16132013,112.319868 5.93152846,112.55254 7.72753202,112.55254 C9.80896463,112.55254 11.855111,112.240023 13.8272664,111.629461 C14.4449631,111.438228 14.8094746,110.713378 14.6414254,110.010462 C14.4733763,109.307547 13.8364035,108.892748 13.2187067,109.083981 Z\" id=\"Combined-Shape\" fill=\"#474747\"></path>\n            <path d=\"M13.2187067,103.807978 C11.4444489,104.357273 9.60292935,104.638536 7.72753202,104.638536 C6.10912849,104.638536 4.51560757,104.429088 2.96811908,104.018299 C2.34470792,103.852812 1.72144348,104.293755 1.57601899,105.003172 C1.4305945,105.71259 1.81807925,106.421841 2.44149042,106.587329 C4.16132013,107.043866 5.93152846,107.276538 7.72753202,107.276538 C9.80896463,107.276538 11.855111,106.96402 13.8272664,106.353459 C14.4449631,106.162225 14.8094746,105.437375 14.6414254,104.73446 C14.4733763,104.031545 13.8364035,103.616745 13.2187067,103.807978 Z\" id=\"Combined-Shape-Copy-2\" fill=\"#474747\"></path>\n            <path d=\"M13.2187067,7.08126123 C11.4444489,7.63055565 9.60292935,7.91181918 7.72753202,7.91181918 C6.10912849,7.91181918 4.51560757,7.70237054 2.96811908,7.29158237 C2.34470792,7.12609492 1.72144348,7.5670376 1.57601899,8.27645543 C1.4305945,8.98587325 1.81807925,9.69512412 2.44149042,9.86061157 C4.16132013,10.3171485 5.93152846,10.5498206 7.72753202,10.5498206 C9.80896463,10.5498206 11.855111,10.2373034 13.8272664,9.62674171 C14.4449631,9.43550831 14.8094746,8.71065779 14.6414254,8.00774276 C14.4733763,7.30482774 13.8364035,6.89002783 13.2187067,7.08126123 Z\" id=\"Combined-Shape-Copy-3\" fill=\"#474747\"></path>\n            <path d=\"M13.2187067,114.359984 C11.4444489,114.909278 9.60292935,115.190542 7.72753202,115.190542 C6.10912849,115.190542 4.51560757,114.981093 2.96811908,114.570305 C2.34470792,114.404817 1.72144348,114.84576 1.57601899,115.555178 C1.4305945,116.264596 1.81807925,116.973847 2.44149042,117.139334 C4.16132013,117.595871 5.93152846,117.828543 7.72753202,117.828543 C9.80896463,117.828543 11.855111,117.516026 13.8272664,116.905464 C14.4449631,116.714231 14.8094746,115.98938 14.6414254,115.286465 C14.4733763,114.58355 13.8364035,114.16875 13.2187067,114.359984 Z\" id=\"Combined-Shape-Copy\" fill=\"#474747\"></path>\n        </g>\n    </g>\n</svg>"
        },
        "$:/plugins/tiddlywiki/epub-utils/readme": {
            "title": "$:/plugins/tiddlywiki/epub-utils/readme",
            "text": "TBD"
        },
        "$:/plugins/tiddlywiki/epub-utils/deserializer.js": {
            "text": "/*\\\ntitle: $:/plugins/tiddlywiki/epub-utils/deserializer.js\ntype: application/javascript\nmodule-type: tiddlerdeserializer\n\nEPUB file deserializer\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nParse an EPUB file into tiddlers\n*/\nexports[\"application/epub+zip\"] = function(text,fields) {\n\t// Collect output tiddlers in an array\n\tvar results = [],\n\t\tEPUBImporter = require(\"$:/plugins/tiddlywiki/epub-utils/importer.js\").EPUBImporter,\n\t\timporter = new EPUBImporter({\n\t\t\ttext: text\n\t\t});\n\t// Return the output tiddlers\n\treturn importer.getTiddlers();\n};\n\n})();\n",
            "title": "$:/plugins/tiddlywiki/epub-utils/deserializer.js",
            "type": "application/javascript",
            "module-type": "tiddlerdeserializer"
        },
        "$:/plugins/tiddlywiki/epub-utils/epub-file-reader.js": {
            "text": "/*\\\ntitle: $:/plugins/tiddlywiki/epub-utils/epub-file-reader.js\ntype: application/javascript\nmodule-type: library\n\nClass to provide access to the files within an epub file or folder\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nif($tw.node) {\n\tvar fs = require(\"fs\"),\n\t\tpath = require(\"path\");\t\n}\n\nvar DOMParser = $tw.browser ? window.DOMParser : require(\"$:/plugins/tiddlywiki/xmldom/dom-parser\").DOMParser,\n\tJSZip = require(\"$:/plugins/tiddlywiki/jszip/jszip.js\"),\n\tbase64arraybuffer = require(\"$:/plugins/tiddlywiki/base64-arraybuffer/base64-arraybuffer.js\");\n\nvar EPUBFileReader = function(options) {\n\tthis.filename = options.filename;\n\tthis.text = options.text;\n\tthis.zip = null;\n\tvar data;\n\t// Filename might be a zip or a directory\n\tif(this.filename) {\n\t\t// If it's a file, read it as a zip\n\t\tif(!fs.statSync(this.filename).isDirectory()) {\n\t\t\tthis.text = fs.readFileSync(this.filename,\"base64\");\n\t\t\tthis.zip = new JSZip(this.text,{base64: true});\t\t\n\t\t}\n\t} else {\n\t\t// We have base64 text of the zip file\n\t\tthis.zip = new JSZip(this.text,{base64: true});\t\t\n\t}\n};\n\nEPUBFileReader.prototype.getFileAsXmlDocument = function(filepath) {\n\t// Remove any leading slash\n\tif(filepath.charAt(0) === \"/\") {\n\t\tfilepath = filepath.slice(1);\n\t}\n\tvar text;\n\tif(this.zip) {\n\t\ttext = this.zip.files[filepath].asText();\n\t} else {\n\t\ttext = fs.readFileSync(path.resolve(this.filename,filepath),\"utf8\");\n\t}\n\tif(text) {\n\t\treturn new DOMParser().parseFromString(text,\"text/xml\");\n\t}\n\treturn null;\n};\n\nEPUBFileReader.prototype.getFileAsText = function(type,filepath) {\n\t// Remove any leading slash\n\tif(filepath.charAt(0) === \"/\") {\n\t\tfilepath = filepath.slice(1);\n\t}\n\tvar encoding = ($tw.config.contentTypeInfo[type] || {encoding: \"utf8\"}).encoding;\n\tif(this.zip) {\n\t\tvar file = this.zip.files[filepath],\n\t\t\ttext;\n\t\tif(encoding === \"base64\") {\n\t\t\treturn base64arraybuffer.encode(file.asArrayBuffer());\n\t\t} else {\n\t\t\treturn file.asText();\n\t\t}\t\t\n\t} else {\n\t\treturn fs.readFileSync(path.resolve(this.filename,filepath),encoding);\n\t}\n};\n\nexports.EPUBFileReader = EPUBFileReader;\n\n})();\n",
            "title": "$:/plugins/tiddlywiki/epub-utils/epub-file-reader.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/tiddlywiki/epub-utils/epub-import-command.js": {
            "text": "/*\\\ntitle: $:/plugins/tiddlywiki/epub-utils/epub-import-command.js\ntype: application/javascript\nmodule-type: command\n\nCommand to import an EPUB file\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.info = {\n\tname: \"epub-import\",\n\tsynchronous: true\n};\n\nvar EPUBImporter = require(\"$:/plugins/tiddlywiki/epub-utils/importer.js\").EPUBImporter;\n\nvar Command = function(params,commander,callback) {\n\tthis.params = params;\n\tthis.commander = commander;\n\tthis.callback = callback;\n};\n\nCommand.prototype.execute = function() {\n\tif(this.params.length < 2) {\n\t\treturn \"Missing subcommand and parameter\";\n\t}\n\tvar subcommand = this.params[0],\n\t\timporter;\n\tswitch(subcommand) {\n\t\tcase \"file\": // From a file\n\t\t\timporter = new EPUBImporter({\n\t\t\t\tfilename: this.params[1],\n\t\t\t\timportSpec: this.params[2]\n\t\t\t});\n\t\t\tthis.commander.wiki.addTiddlers(importer.getTiddlers());\n\t\t\tbreak;\n\t\tcase \"tiddler\": // From a tiddler\n\t\t\timporter = new EPUBImporter({\n\t\t\t\ttext: this.commander.wiki.getTiddlerText(this.params[1]),\n\t\t\t\timportSpec: this.params[2]\n\t\t\t});\n\t\t\tthis.commander.wiki.addTiddlers(importer.getTiddlers());\n\t\t\tbreak;\n\t}\n\treturn null;\n};\n\nexports.Command = Command;\n\n})();\n",
            "title": "$:/plugins/tiddlywiki/epub-utils/epub-import-command.js",
            "type": "application/javascript",
            "module-type": "command"
        },
        "$:/plugins/tiddlywiki/epub-utils/importer.js": {
            "text": "/*\\\ntitle: $:/plugins/tiddlywiki/epub-utils/importer.js\ntype: application/javascript\nmodule-type: library\n\nClass to import an Excel file\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar DEFAULT_IMPORT_SPEC_TITLE = \"$:/config/plugins/tiddlywiki/epub-utils/default-import-spec\";\n\nvar MEDIA_TYPE_MAPPINGS = {\n\t\"application/xhtml+xml\": \"text/html\"\n};\n\nvar JSZip = require(\"$:/plugins/tiddlywiki/jszip/jszip.js\"),\n\tDOMParser = $tw.browser ? window.DOMParser : require(\"$:/plugins/tiddlywiki/xmldom/dom-parser\").DOMParser,\n\tbase64arraybuffer = require(\"$:/plugins/tiddlywiki/base64-arraybuffer/base64-arraybuffer.js\"),\n\ttextSlicer = require(\"$:/plugins/tiddlywiki/text-slicer/modules/slicer.js\"),\n\tepubFileReader = require(\"$:/plugins/tiddlywiki/epub-utils/epub-file-reader.js\");\n\nvar EPUBImporter = function(options) {\n\tthis.filename = options.filename;\n\tthis.text = options.text;\n\tthis.importSpec = options.importSpec || $tw.wiki.getTiddlerText(DEFAULT_IMPORT_SPEC_TITLE);\n\tthis.logger = new $tw.utils.Logger(\"epub-utils\");\n\tthis.extractedTiddlers = {};\n\t// Read zip file \n\tthis.epubReader = new epubFileReader.EPUBFileReader({\n\t\tfilename: this.filename,\n\t\ttext: this.text\n\t});\n\t// Read META-INF/container.xml for the file path to the rootfile\n\t// Keep things simple by only reading the first rootfile element (see http://www.idpf.org/epub/30/spec/epub30-ocf.html#sec-container-metainf-container.xml)\n\tthis.xmlContainer = this.epubReader.getFileAsXmlDocument(\"META-INF/container.xml\");\n\tthis.filepathPackageDocument = this.findNodeAndGetAttribute(this.xmlContainer,[\"container\",\"rootfiles\",\"rootfile\"],\"full-path\");\n\t// Read the package document\n\tthis.xmlPackageDocument = this.epubReader.getFileAsXmlDocument(this.filepathPackageDocument);\n\t// Read the metadata\n\tthis.readMetaData();\n\t// Generate the base tiddler title from the document title\n\tthis.baseTiddlerTitle = options.baseTiddlerTitle || this.metadata[\"dc:title\"] || \"Publication\";\n\t// Read the manifest and spine\n\tthis.readManifest();\n\tthis.readSpine();\n\t// Generate spine tiddler\n\tthis.generateSpineTiddler();\n\t// Generate item tiddlers\n\tthis.generateItemTiddlers();\n\t// Generate TOC tiddlers\n\tthis.generateTOCTiddlers();\n};\n\nEPUBImporter.prototype.readMetaData = function() {\n\tvar self = this;\n\t// Read Dublin Core metadata and meta tags\n\tvar nodeMetadata = this.findNode(this.xmlPackageDocument,[\"package\",\"metadata\"]);\n\tthis.metadata = {};\n\t$tw.utils.each(nodeMetadata.childNodes,function(node) {\n\t\tvar n = (node.tagName || \"\").toLowerCase();\n\t\tif(n.substr(0,3) === \"dc:\") {\n\t\t\tself.metadata[n] = node.textContent;\n\t\t} else if(n === \"meta\") {\n\t\t\tvar p = node.getAttribute(\"property\"),\n\t\t\t\tref = node.getAttribute(\"refines\"),\n\t\t\t\tid = node.getAttribute(\"id\"),\n\t\t\t\tscheme = node.getAttribute(\"scheme\");\n\t\t\tif(p) {\n\t\t\t\tself.metadata[p] = node.textContent;\t\t\n\t\t\t}\n\t\t}\n\t});\nconsole.log(this.metadata)\n};\n\nEPUBImporter.prototype.readManifest = function() {\n\tvar self = this;\n\t// Read manifest\n\tvar nodeManifest = this.findNode(this.xmlPackageDocument,[\"package\",\"manifest\"]);\n\tthis.manifest = {};\n\t$tw.utils.each(nodeManifest.childNodes,function(node) {\n\t\tvar n = (node.tagName || \"\").toLowerCase();\n\t\tif(n === \"item\") {\n\t\t\tvar p = node.getAttribute(\"properties\") || \"\",\n\t\t\t\tid = node.getAttribute(\"id\"),\n\t\t\t\thref = $tw.utils.resolvePath(node.getAttribute(\"href\"),self.filepathPackageDocument),\n\t\t\t\tmediaType = node.getAttribute(\"media-type\");\n\t\t\tif($tw.utils.hop(MEDIA_TYPE_MAPPINGS,mediaType)) {\n\t\t\t\tmediaType = MEDIA_TYPE_MAPPINGS[mediaType];\n\t\t\t}\n\t\t\tself.manifest[id] = {properties: p.split(\" \"), id: id, href: href, \"media-type\": mediaType};\n\t\t}\n\t});\n};\n\nEPUBImporter.prototype.readSpine = function() {\n\tvar self = this;\n\t// Read spine\n\tvar nodeSpine = this.findNode(this.xmlPackageDocument,[\"package\",\"spine\"]);\n\tthis.tocItem = this.manifest[nodeSpine.getAttribute(\"toc\")].href;\n\tthis.tocRootTitle = this.baseTiddlerTitle + \"/\" + this.tocItem\n\tthis.spine = [];\n\t$tw.utils.each(nodeSpine.childNodes,function(node) {\n\t\tif((node.tagName || \"\").toLowerCase() === \"itemref\") {\n\t\t\tvar idref = node.getAttribute(\"idref\");\n\t\t\tself.spine.push(idref)\n\t\t}\n\t});\n};\n\nEPUBImporter.prototype.generateSpineTiddler = function() {\n\tvar self = this;\n\tself.addTiddler({\n\t\ttitle: self.baseTiddlerTitle,\n\t\tlist: $tw.utils.stringifyList([this.tocRootTitle].concat(self.spine.map(function(id) {\n\t\t\treturn self.baseTiddlerTitle + \"/\" + self.manifest[id].href\n\t\t}))),\n\t\ttext: \"\",\n\t\trole: \"epubble-spine\",\n\t\t\"table-of-contents\": this.tocRootTitle\n\t});\n};\n\n/*\nGenerate tiddlers for each item in the manifest\n*/\nEPUBImporter.prototype.generateItemTiddlers = function() {\n\tvar self = this;\n\t$tw.utils.each(this.manifest,function(item) {\n\t\t// Get the item type and text\n\t\tvar type = item[\"media-type\"],\n\t\t\ttext = self.epubReader.getFileAsText(type,item.href);\n\t\t// Split HTML tiddlers, directly add others\n\t\tif(\"text/html\".split(\" \").indexOf(type) !== -1) {\n\t\t\tvar doc = new DOMParser().parseFromString(text,\"text/html\"),\n\t\t\t\tslicer = new textSlicer.Slicer({\n\t\t\t\t\tsourceDoc: doc,\n\t\t\t\t\tbaseTiddlerTitle: self.baseTiddlerTitle + \"/\" + item.href,\n\t\t\t\t\trole: \"epubble-content\"\n\t\t\t\t});\n\t\t\t\tself.addTiddlers(slicer.getTiddlers());\n\t\t} else {\n\t\t\tself.addTiddler({\n\t\t\t\ttitle: self.baseTiddlerTitle + \"/\" + item.href,\n\t\t\t\ttext: text,\n\t\t\t\ttype: type,\n\t\t\t\trole: \"epubble-content\",\n\t\t\t\t\"toc-type\": (($tw.config.contentTypeInfo[type] || {flags: []}).flags.indexOf(\"image\") !== -1) ? \"image\" : \"misc\"\n\t\t\t});\t\t\t\n\t\t}\n\t});\n};\n\n/*\nGenerate tiddlers for the table of contents\n*/\nEPUBImporter.prototype.generateTOCTiddlers = function() {\n\tvar self = this;\n\t// Read the TOC XML file\n\tvar xmlTOC = this.epubReader.getFileAsXmlDocument(this.tocItem);\n\t// Function to process a nav point\n\tvar processNavPoint = function(node,parent) {\n\t\tif(node.nodeType === 1 && node.tagName === \"navPoint\") {\n\t\t\tvar id = node.getAttribute(\"id\"),\n\t\t\t\ttext = self.findNode(node,[\"navLabel\",\"text\"]).textContent,\n\t\t\t\t// HACK: We discard the location hash because TW can't do intra-tiddler links\n\t\t\t\tsrc = self.findNodeAndGetAttribute(node,[\"content\"],\"src\").split(\"#\")[0],\n\t\t\t\ttarget = self.baseTiddlerTitle + \"/\" + $tw.utils.resolvePath(src,self.filepathPackageDocument);\n\t\t\t// Add the TOC node\n\t\t\tvar title = self.addTiddler({\n\t\t\t\t\ttitle: self.tocRootTitle + \"/\" + id,\n\t\t\t\t\tcaption: text,\n\t\t\t\t\ttarget: target,\n\t\t\t\t\ttags: \"[[\" + parent + \"]]\",\n\t\t\t\t\trole: \"epubble-toc\"\n\t\t\t\t});\n\t\t\t// Add ourselves to the list field of our parent\n\t\t\tvar parentTiddler = self.getTiddler(parent);\n\t\t\tparentTiddler.list = parentTiddler.list + \" [[\" + title + \"]]\";\n\t\t\t// Process children\n\t\t\t$tw.utils.each(node.childNodes,function(node) {\n\t\t\t\tprocessNavPoint(node,title);\n\t\t\t});\n\t\t}\n\t};\n\t// Define a parent tiddler to attach the TOC\n\tvar parent = this.addTiddler({\n\t\ttitle: this.tocRootTitle,\n\t\tcaption: \"Table of Contents\",\n\t\ttext: \"<div class='tc-table-of-contents'>\\n\\n<<toc \\\"\\\"\\\"\" + this.tocRootTitle + \"\\\"\\\"\\\">>\\n\\n</div>\\n\",\n\t\t\"toc-type\": \"paragraph\"\n\t});\n\t// Process the children of the nav map\n\tvar navMap = this.findNode(xmlTOC,[\"ncx\",\"navMap\"]);\n\t$tw.utils.each(navMap.childNodes,function(node) {\n\t\tprocessNavPoint(node,parent);\n\t});\n};\n\nEPUBImporter.prototype.findNodeAndGetAttribute = function(rootNode,selectors,attributeName) {\n\tvar node = this.findNode(rootNode,selectors);\n\tif(node) {\n\t\treturn node.getAttribute(attributeName);\n\t}\n\treturn null;\n};\n\nEPUBImporter.prototype.findNode = function(rootNode,selectors) {\n\tvar node = rootNode;\n\tfor(var index=0; index<selectors.length; index++) {\n\t\tvar selector = selectors[index];\n\t\t// Replace simple string selectors\n\t\tif(typeof selector === \"string\") {\n\t\t\tselector = {\n\t\t\t\tname: selector,\n\t\t\t\tindex: 0,\n\t\t\t\tmustBeImmediateDescendent: true\n\t\t\t};\n\t\t}\n\t\t// Get the candidate nodes\n\t\tvar candidateNodes = Array.prototype.slice.call(node.getElementsByTagName(selector.name),0);\n\t\t// If required, weed out the non-immediate descendents\n\t\tif(selector.mustBeImmediateDescendent) {\n\t\t\tfor(var t=candidateNodes.length-1; t>=0; t--) {\n\t\t\t\tif(candidateNodes[t].parentNode !== node) {\n\t\t\t\t\tcandidateNodes[t] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Retrieve and check the new node\n\t\tnode = candidateNodes[selector.index];\n\t\tif(!node) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn node;\n};\n\nEPUBImporter.prototype.addTiddler = function(fields) {\n\tif(fields.title) {\n\t\tthis.extractedTiddlers[fields.title] = Object.assign({},fields);\n\t}\n\treturn fields.title;\n};\n\nEPUBImporter.prototype.addTiddlers = function(fieldsArray) {\n\tvar self = this;\n\t(fieldsArray || []).forEach(function(fields) {\n\t\tself.addTiddler(fields);\n\t});\n};\n\nEPUBImporter.prototype.getTiddler = function(title) {\n\treturn this.extractedTiddlers[title];\n};\n\nEPUBImporter.prototype.getTiddlers = function() {\n\tvar self = this;\n\treturn Object.keys(this.extractedTiddlers).map(function(title) {\n\t\treturn self.extractedTiddlers[title]\n\t})\n};\n\nexports.EPUBImporter = EPUBImporter;\n\n})();\n",
            "title": "$:/plugins/tiddlywiki/epub-utils/importer.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/tiddlywiki/epub-utils/startup.js": {
            "text": "/*\\\ntitle: $:/plugins/tiddlywiki/epub-utils/startup.js\ntype: application/javascript\nmodule-type: startup\n\nInitialisation\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"startup\";\nexports.after = [\"load-modules\"];\nexports.synchronous = true;\n\nexports.startup = function() {\n\t// Check JSZip is installed\n\tif(!$tw.utils.hop($tw.modules.titles,\"$:/plugins/tiddlywiki/jszip/jszip.js\")) {\n\t\t// Make a logger\n\t\tvar logger = new $tw.utils.Logger(\"epub-utils\");\n\t\tlogger.alert(\"The plugin 'epub-utils' requires the 'jszip' plugin to be installed\");\n\t}\n};\n\n})();\n",
            "title": "$:/plugins/tiddlywiki/epub-utils/startup.js",
            "type": "application/javascript",
            "module-type": "startup"
        }
    }
}